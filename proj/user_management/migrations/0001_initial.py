# Generated by Django 5.2.7 on 2025-10-21 17:10

import django.core.validators
import django.db.models.deletion
import user_management.infrastructure.orm.django_models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('academic_structure', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('user_id', models.AutoField(primary_key=True, serialize=False)),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('email', models.EmailField(db_index=True, max_length=255, unique=True)),
                ('password', models.CharField(blank=True, max_length=255, null=True)),
                ('role', models.CharField(choices=[('Admin', 'Admin'), ('Lecturer', 'Lecturer'), ('Student', 'Student')], max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
                'ordering': ['email'],
            },
        ),
        migrations.CreateModel(
            name='LecturerProfile',
            fields=[
                ('lecturer_id', models.AutoField(primary_key=True, serialize=False)),
                ('department_name', models.CharField(max_length=100)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='lecturer_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'lecturer_profiles',
                'ordering': ['department_name'],
            },
        ),
        migrations.CreateModel(
            name='StudentProfile',
            fields=[
                ('student_profile_id', models.AutoField(primary_key=True, serialize=False)),
                ('student_id', models.CharField(max_length=20, unique=True, validators=[user_management.infrastructure.orm.django_models.validate_student_id_format])),
                ('year_of_study', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(4)])),
                ('qr_code_data', models.CharField(max_length=20)),
                ('program', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='students', to='academic_structure.program')),
                ('stream', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='students', to='academic_structure.stream')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='student_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'student_profiles',
                'ordering': ['student_id'],
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='idx_users_email'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['role'], name='idx_users_role'),
        ),
        migrations.AddIndex(
            model_name='lecturerprofile',
            index=models.Index(fields=['user'], name='idx_lecturer_user'),
        ),
        migrations.AddIndex(
            model_name='studentprofile',
            index=models.Index(fields=['student_id'], name='idx_student_id'),
        ),
        migrations.AddIndex(
            model_name='studentprofile',
            index=models.Index(fields=['user'], name='idx_student_user'),
        ),
        migrations.AddIndex(
            model_name='studentprofile',
            index=models.Index(fields=['program', 'stream'], name='idx_prog_stream'),
        ),
    ]
